#! /usr/bin/perl
#
# PAWNGEN - generates a directory full of Hoffman XML control files to
# analyze a particular pawn configuration
#

@white_pawns = ('a5', 'b2', 'd4', 'g2', 'h3');
@black_pawns = ('a6', 'd5', 'd6', 'g6', 'h7');

sub forward_move {
    my ($color, $pawn) = @_;

    if ($color eq "white") {
	return "" if ($pawn !~ /[1-7]/);
	$pawn =~ tr/[1-7]/[2-8]/;
    } else {
	return "" if ($pawn !~ /[2-8]/);
	$pawn =~ tr/[2-8]/[1-7]/;
    }

    return $pawn;
}

sub forward_left_move {
    my ($color, $pawn) = @_;

    return "" if ($pawn !~ /^[b-h]/);

    $pawn =~ tr/[b-h]/[a-g]/;

    if ($color eq "white") {
	return "" if ($pawn !~ /[1-7]/);
	$pawn =~ tr/[1-7]/[2-8]/;
    } else {
	return "" if ($pawn !~ /[2-8]/);
	$pawn =~ tr/[2-8]/[1-7]/;
    }

    return $pawn;
}

sub forward_right_move {
    my ($color, $pawn) = @_;

    return "" if ($pawn !~ /^[a-g]/);

    $pawn =~ tr/[a-g]/[b-h]/;

    if ($color eq "white") {
	return "" if ($pawn !~ /[1-7]/);
	$pawn =~ tr/[1-7]/[2-8]/;
    } else {
	return "" if ($pawn !~ /[2-8]/);
	$pawn =~ tr/[2-8]/[1-7]/;
    }

    return $pawn;
}

sub lower_left_move {
    my ($color, $pawn) = @_;

    return "" if ($pawn !~ /^[b-h]/);

    $pawn =~ tr/[b-h]/[a-g]/;

    if ($color eq "white") {
	$pawn =~ tr/[2-8]/[1-7]/;
    } else {
	$pawn =~ tr/[1-7]/[2-8]/;
    }

    return $pawn;
}

sub lower_right_move {
    my ($color, $pawn) = @_;

    return "" if ($pawn !~ /^[a-g]/);

    $pawn =~ tr/[a-g]/[b-h]/;

    if ($color eq "white") {
	$pawn =~ tr/[2-8]/[1-7]/;
    } else {
	$pawn =~ tr/[1-7]/[2-8]/;
    }

    return $pawn;
}

sub consider_capture_by_enemy_king {
    my ($pawn, $white_pawns, $black_pawns) = @_;
    my $pawn_color = grep(/$pawn/, @$white_pawns) ? "white" : "black";
    my $friendly_pawns = grep(/$pawn/, @$white_pawns) ? $white_pawns : $black_pawns;
    my $enemy_pawns = grep(/$pawn/, @$white_pawns) ? $black_pawns : $white_pawns;
    my $ll_move = &lower_left_move($pawn_color, $pawn);
    my $lr_move = &lower_right_move($pawn_color, $pawn);

    if (not grep(/$ll_move/, @$friendly_pawns) and not grep(/$lr_move/, @$friendly_pawns)) {
	my @white_pawns = sort grep(!/$pawn/, @$white_pawns);
	my @black_pawns = sort grep(!/$pawn/, @$black_pawns);
	&consider_position(\@white_pawns, \@black_pawns);
    }
}

sub consider_forward_move {
    my ($pawn, $white_pawns, $black_pawns) = @_;
    my $pawn_color = grep(/$pawn/, @$white_pawns) ? "white" : "black";
    my $friendly_pawns = grep(/$pawn/, @$white_pawns) ? $white_pawns : $black_pawns;
    my $enemy_pawns = grep(/$pawn/, @$white_pawns) ? $black_pawns : $white_pawns;
    my $fwd_move = &forward_move($pawn_color, $pawn);

    if (not grep(/$fwd_move/, @$friendly_pawns) and not grep(/$fwd_move/, @$enemy_pawns)) {
	my @white_pawns = grep(!/$pawn/, @$white_pawns);
	my @black_pawns = grep(!/$pawn/, @$black_pawns);

	if ($pawn_color eq "white") {
	    push @white_pawns, $fwd_move;
	} else {
	    push @black_pawns, $fwd_move;
	}
	@white_pawns = sort @white_pawns;
	@black_pawns = sort @black_pawns;
	&consider_position(\@white_pawns, \@black_pawns);
    }
}

sub consider_capture_of_enemy_pawn_left {
    my ($pawn, $white_pawns, $black_pawns) = @_;
    my $pawn_color = grep(/$pawn/, @$white_pawns) ? "white" : "black";
    my $friendly_pawns = grep(/$pawn/, @$white_pawns) ? $white_pawns : $black_pawns;
    my $enemy_pawns = grep(/$pawn/, @$white_pawns) ? $black_pawns : $white_pawns;
    my $capture_move = &forward_left_move($pawn_color, $pawn);

    if (grep(/$capture_move/, @$enemy_pawns)) {
	my @white_pawns = grep(!/$pawn/, @$white_pawns);
	my @black_pawns = grep(!/$pawn/, @$black_pawns);
	if ($pawn_color eq "white") {
	    @black_pawns = grep(!/$capture_move/, @black_pawns);
	    push @white_pawns, $capture_move;
	} else {
	    @white_pawns = grep(!/$capture_move/, @white_pawns);
	    push @black_pawns, $capture_move;
	}
	@white_pawns = sort @white_pawns;
	@black_pawns = sort @black_pawns;
	&consider_position(\@white_pawns, \@black_pawns);
    }
}

sub consider_capture_of_enemy_pawn_right {
    my ($pawn, $white_pawns, $black_pawns) = @_;
    my $pawn_color = grep(/$pawn/, @$white_pawns) ? "white" : "black";
    my $friendly_pawns = grep(/$pawn/, @$white_pawns) ? $white_pawns : $black_pawns;
    my $enemy_pawns = grep(/$pawn/, @$white_pawns) ? $black_pawns : $white_pawns;
    my $capture_move = &forward_right_move($pawn_color, $pawn);

    if (grep(/$capture_move/, @$enemy_pawns)) {
	my @white_pawns = grep(!/$pawn/, @$white_pawns);
	my @black_pawns = grep(!/$pawn/, @$black_pawns);
	if ($pawn_color eq "white") {
	    @black_pawns = grep(!/$capture_move/, @black_pawns);
	    push @white_pawns, $capture_move;
	} else {
	    @white_pawns = grep(!/$capture_move/, @white_pawns);
	    push @black_pawns, $capture_move;
	}
	@white_pawns = sort @white_pawns;
	@black_pawns = sort @black_pawns;
	&consider_position(\@white_pawns, \@black_pawns);
    }
}

my %positions_considered;

sub consider_position {
    my ($white_pawns, $black_pawns) = @_;

    my $filename = "K" . join('', @$white_pawns) . "K" . join('', @$black_pawns);

    return if exists $positions_considered{$filename};

    $positions_considered{$filename} = $filename;

    print "$filename\n";

    foreach my $pawn (@$white_pawns) {
	if (grep(/$pawn/, @$black_pawns)) {
	    $DB::single = 1;
	    die "duplicate pawns";
	}
    }

    foreach my $pawn (@$black_pawns) {
	if (grep(/$pawn/, @$white_pawns)) {
	    $DB::single = 1;
	    die "duplicate pawns";
	}
    }

    foreach my $pawn (@$white_pawns, @$black_pawns) {
	&consider_capture_by_enemy_king($pawn, $white_pawns, $black_pawns);
	&consider_forward_move($pawn, $white_pawns, $black_pawns);
#	&consider_double_forward_move($pawn, $white_pawns, $black_pawns);
	&consider_capture_of_enemy_pawn_left($pawn, $white_pawns, $black_pawns);
	&consider_capture_of_enemy_pawn_right($pawn, $white_pawns, $black_pawns);
    }
}

# &consider_position(\@white_pawns, \@black_pawns);

sub filename {
    my ($white_pawn_bitvector, $black_pawn_bitvector, $white_queen, $black_queen) = @_;
    my $filename = "k";

    $filename .= "q" if $white_queen;
    for (my $white_pawn = 0; $white_pawn < 5; $white_pawn ++) {
	$filename .= $white_pawns[$white_pawn] if $white_pawn_bitvector & (1 << $white_pawn);
    }
    $filename .= "k";
    $filename .= "q" if $black_queen == 1;
    $filename .= "n" if $black_queen == 2;
    for (my $black_pawn = 0; $black_pawn < 5; $black_pawn ++) {
	$filename .= $black_pawns[$black_pawn] if $black_pawn_bitvector & (1 << $black_pawn);
    }
    return $filename . ".htb";
}

sub generate_one_control_file {
    my ($white_pawns, $black_pawns, $white_queen, $black_queen) = @_;

    return if (($black_pawns & 6) == 2);

    my $queenable_white_pawns = 0;
    my $queenable_black_pawns = 0;

    $queenable_black_pawns |= 1 if (($white_pawns & 3) != 3);
    $queenable_black_pawns |= 2 if (!($white_pawns & 4));
    $queenable_black_pawns |= 8 if (($white_pawns & 24) != 24);
    $queenable_black_pawns |= 16 if (($white_pawns & 24) != 24);
    $queenable_black_pawns &= $black_pawns;

    $queenable_white_pawns |= 1 if (!($black_pawns & 1) or !($white_pawns & 2));
    $queenable_white_pawns |= 2;
    $queenable_white_pawns |= 4 if (($black_pawns & 6) == 0);
    $queenable_white_pawns |= 8 if (($black_pawns & 24) != 24);
    $queenable_white_pawns |= 16 if (($black_pawns & 24) != 24);
    $queenable_white_pawns &= $white_pawns;

    open (OUT, ">&STDOUT") || die "open";
    print OUT "<tablebase>\n";
    print OUT "   <move-restriction color=\"white\" type=\"discard\"/>\n";
    print OUT "   <move-restriction color=\"black\" type=\"concede\"/>\n";
    print OUT "   <piece color=\"white\" type=\"king\"/>\n";
    print OUT "   <piece color=\"black\" type=\"king\"/>\n";
    print OUT "   <piece color=\"white\" type=\"queen\"/>\n" if $white_queen;
    print OUT "   <piece color=\"black\" type=\"queen\"/>\n" if $black_queen == 1;
    print OUT "   <piece color=\"black\" type=\"knight\"/>\n" if $black_queen == 2;
    for (my $white_pawn = 0; $white_pawn < 5; $white_pawn ++) {
	if ($white_pawns & (1 << $white_pawn)) {
	    my $location = "$white_pawns[$white_pawn]+";
	    if (($white_pawn == 1) && ($white_pawns & 1) && !($black_pawns & 1)) {
		$location .= " a6+";
	    }
	    if (($white_pawn == 3) && ($white_pawns & 16) && !($black_pawns & 16)) {
		$location .= " h4+";
	    }
	    if (($white_pawn == 4) && ($white_pawns & 8) && !($black_pawns & 8)) {
		$location .= " g4+";
	    }
	    print OUT "   <piece color=\"white\" type=\"pawn\" location=\"$location\"/>\n";
	}
    }
    for (my $black_pawn = 0; $black_pawn < 5; $black_pawn ++) {
	if ($black_pawns & (1 << $black_pawn)) {
	    my $location = "$black_pawns[$black_pawn]+";
	    if (($black_pawn == 0) && !($white_pawns & 2)) {
		$location .= " b5+";
	    }
	    if (($black_pawn == 3) && ($black_pawns & 16) && !($white_pawns & 16)) {
		$location .= " h5+";
	    }
	    if (($black_pawn == 4) && ($black_pawns & 8) && !($white_pawns & 8)) {
		$location .= " g5+";
	    }
	    print OUT "   <piece color=\"black\" type=\"pawn\" location=\"$location\"/>\n";
	}
    }

    if (not $white_queen) {
	for (my $white_pawn = 0; $white_pawn < 5; $white_pawn ++) {
	    if ($queenable_white_pawns & (1 << $white_pawn)) {
		print OUT "   <futurebase filename=\"", &filename($white_pawns & ~(1 << $white_pawn), $black_pawns, 1, $black_queen), "\" type=\"promotion\"/>\n";
		print OUT "   <futurebase filename=\"", &filename($white_pawns & ~(1 << $white_pawn), $black_pawns, 1, 0), "\" type=\"capture-promotion\"/>\n" if $black_queen;
	    }
	}
    } else {
	print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns, 0, $black_queen), "\" type=\"capture\"/>\n";
    }
    for (my $white_pawn = 0; $white_pawn < 5; $white_pawn ++) {
	if ($white_pawns & (1 << $white_pawn)) {
	    print OUT "   <futurebase filename=\"", &filename($white_pawns & ~(1 << $white_pawn), $black_pawns, $white_queen, $black_queen), "\" type=\"capture\"/>\n";
	}
    }

    if (not $black_queen) {
	for (my $black_pawn = 0; $black_pawn < 5; $black_pawn ++) {
	    if ($queenable_black_pawns & (1 << $black_pawn)) {
		print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns & ~(1 << $black_pawn), $white_queen, 1), "\" type=\"promotion\"/>\n";
		print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns & ~(1 << $black_pawn), $white_queen, 2), "\" type=\"promotion\"/>\n";
		print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns & ~(1 << $black_pawn), 0, 1), "\" type=\"capture-promotion\"/>\n" if $white_queen;
		print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns & ~(1 << $black_pawn), 0, 2), "\" type=\"capture-promotion\"/>\n" if $white_queen;
	    }
	}
    } else {
	print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns, $white_queen, 0), "\" type=\"capture\"/>\n";
    }
    for (my $black_pawn = 0; $black_pawn < 5; $black_pawn ++) {
	if ($black_pawns & (1 << $black_pawn)) {
	    print OUT "   <futurebase filename=\"", &filename($white_pawns, $black_pawns & ~(1 << $black_pawn), $white_queen, $black_queen), "\" type=\"capture\"/>\n";
	}
    }

    if ($queenable_white_pawns) {
	print OUT "   <prune color=\"white\" move=\"P=Q\" type=\"discard\"/>\n" if $white_queen;
	print OUT "   <prune color=\"white\" move=\"P=R\" type=\"discard\"/>\n";
	print OUT "   <prune color=\"white\" move=\"P=B\" type=\"discard\"/>\n";
	print OUT "   <prune color=\"white\" move=\"P=N\" type=\"discard\"/>\n";
    }
    if ($queenable_black_pawns) {
	print OUT "   <prune color=\"black\" move=\"P=Q\" type=\"concede\"/>\n" if $black_queen;
	print OUT "   <prune color=\"black\" move=\"P=R\" type=\"discard\"/>\n";
	print OUT "   <prune color=\"black\" move=\"P=B\" type=\"discard\"/>\n";
	print OUT "   <prune color=\"black\" move=\"P=N\" type=\"concede\"/>\n" if $black_queen;
    }
    print OUT "   <prune color=\"white\" move=\"PxQ\" type=\"discard\"/>\n"
	if ($black_queen == 1) and $white_pawns;
    print OUT "   <prune color=\"white\" move=\"PxN\" type=\"discard\"/>\n"
	if ($black_queen == 2) and $white_pawns;
    print OUT "   <prune color=\"black\" move=\"PxQ\" type=\"concede\"/>\n" if $white_queen and $black_pawns;

    print OUT "   <prune color=\"black\" move=\"stalemate\" type=\"concede\"/>\n";
    print OUT "   <generation-controls>\n";
    print OUT "      <output filename=\"", &filename($white_pawns, $black_pawns, $white_queen, $black_queen), "\"/>\n";
    print OUT "   </generation-controls>\n";
    print OUT "</tablebase>\n";
}

sub generate_control_files {

    for (my $white_pawns = 0; $white_pawns <= 31; $white_pawns ++) {
	for (my $black_pawns = 0; $black_pawns <= 31; $black_pawns ++) {
	    &generate_one_control_file($white_pawns, $black_pawns, 0, 0);
	    &generate_one_control_file($white_pawns, $black_pawns, 1, 0);
	    &generate_one_control_file($white_pawns, $black_pawns, 0, 1);
	    &generate_one_control_file($white_pawns, $black_pawns, 1, 1);
	    &generate_one_control_file($white_pawns, $black_pawns, 0, 2);
	    &generate_one_control_file($white_pawns, $black_pawns, 1, 2);
	}
    }
}

&generate_control_files;
