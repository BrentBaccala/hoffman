#! /usr/bin/perl
#
# PAWNGEN - generates a directory full of Hoffman XML control files to
# analyze a particular pawn configuration
#

@white_pawns = ('a5', 'b2', 'd4', 'g2', 'h3');
@black_pawns = ('a6', 'd5', 'd6', 'g6', 'h7');

my @earliest_black_pawns = (6,5,0,6,0,0,6,7);
my @next_black_pawns = (0,0,0,5,0,0,5,5);
my @earliest_white_pawns = (5,2,0,4,0,0,2,3);
my @next_white_pawns = (6,6,0,0,0,0,4,4);

my $max_free_pieces = 4;

my $concede_stalemates = 0;

sub filename {
    my ($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen) = @_;

    my $total_white_pawns = eval(join('+',@$white_pawns_by_rows));
    my $total_black_pawns = eval(join('+',@$black_pawns_by_rows));

    my $total_pieces = 2 + $total_white_pawns + $total_black_pawns
	+ ($white_queen ? 1 : 0) + ($black_queen ? 1 : 0);

    my $filename = "k";

    $filename .= "q" if $white_queen;

    if ($total_pieces <= $max_free_pieces) {
	$filename .= "p" if ($total_white_pawns == 1);
	$filename .= "pp" if ($total_white_pawns == 2);
    } else {
	for (my $row = 0; $row < 8; $row ++) {
	    if ($$white_pawns_by_rows[$row] >= 1) {
		$filename .= chr(97 + $row) . chr(48 + $earliest_white_pawns[$row]);
	    }
	    if ($$white_pawns_by_rows[$row] >= 2) {
		$filename .= chr(97 + $row) . chr(48 + $next_white_pawns[$row]);
	    }
	}
    }

    $filename .= "k";
    $filename .= "q" if $black_queen == 1;
    $filename .= "n" if $black_queen == 2;

    if ($total_pieces <= $max_free_pieces) {
	$filename .= "p" if ($total_black_pawns == 1);
	$filename .= "pp" if ($total_black_pawns == 2);
    } else {
	for (my $row = 0; $row < 8; $row ++) {
	    if ($$black_pawns_by_rows[$row] >= 2) {
		$filename .= chr(97 + $row) . chr(48 + $next_black_pawns[$row]);
	    }
	    if ($$black_pawns_by_rows[$row] >= 1) {
		$filename .= chr(97 + $row) . chr(48 + $earliest_black_pawns[$row]);
	    }
	}
    }

    return $filename . ".htb";
}

my %generated_filenames;

sub invert_filename {
    my ($filename) = @_;

    if ($filename =~ s/^kk(..)\./k\1k./ or $filename =~ s/^kk(.)\./k\1k./) {
	return $filename;
    } elsif ($filename =~ m/^k(.)k(.)\./ and index("qrbnp", $1) > index("qrbnp", $2)) {
	$filename =~ s/^k(.)k(.)\./k\2k\1./;
	return $filename;
    } else {
	return undef;
    }
}

sub add_futurebase {
    my ($filename, $type, $array) = @_;

    if (not grep(/$filename/, @$array)) {
	push @$array, $filename;
	if (defined &invert_filename($filename)) {
	    $filename = &invert_filename($filename);
	    print OUT "   <futurebase filename=\"$filename\" colors=\"invert\" type=\"$type\"/>\n";
	} else {
	    print OUT "   <futurebase filename=\"$filename\" type=\"$type\"/>\n";
	}
    }
}

sub generate_control_file_rows {
    my ($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen) = @_;

    my $total_white_pawns = eval(join('+',@$white_pawns_by_rows));
    my $total_black_pawns = eval(join('+',@$black_pawns_by_rows));

    my $total_pieces = 2 + $total_white_pawns + $total_black_pawns
	+ ($white_queen ? 1 : 0) + ($black_queen ? 1 : 0);

    my $queenable_white_pawns = 0;
    my $queenable_black_pawns = 0;

    my @futurebases;

    return if (exists $generated_filenames{&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen)});
    $generated_filenames{&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen)} = &filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen);

    my $symmetry;

    if ($total_pieces <= $max_free_pieces) {
	$symmetry = "2-way";
	$symmetry = "8-way" if ($total_white_pawns == 0 and $total_black_pawns == 0);
    }

    open (OUT, ">&STDOUT") || die "open";
    print OUT "<tablebase>\n";
    print OUT "   <move-restriction color=\"white\" type=\"discard\"/>\n";
    print OUT "   <move-restriction color=\"black\" type=\"concede\"/>\n";
    if (defined $symmetry) {
	print OUT "   <index type=\"standard\" symmetry=\"$symmetry\"/>\n";
    } else {
	print OUT "   <index type=\"standard\"/>\n";
    }
    print OUT "   <format><dtm bits=\"8\"/></format>\n";
    print OUT "   <piece color=\"white\" type=\"king\"/>\n";
    print OUT "   <piece color=\"black\" type=\"king\"/>\n";
    print OUT "   <piece color=\"white\" type=\"queen\"/>\n" if $white_queen;
    print OUT "   <piece color=\"black\" type=\"queen\"/>\n" if $black_queen == 1;
    print OUT "   <piece color=\"black\" type=\"knight\"/>\n" if $black_queen == 2;

    for (my $row = 0; $row < 8; $row ++) {
	if ($$white_pawns_by_rows[$row] >= 1) {
	    my $location = chr(97 + $row) . chr(48 + $earliest_white_pawns[$row]) . "+";
	    if ($total_pieces > $max_free_pieces) {
		print OUT "   <piece color=\"white\" type=\"pawn\" location=\"$location\"/>\n";
	    } else {
		print OUT "   <piece color=\"white\" type=\"pawn\"/>\n";
	    }
	}
	if ($$white_pawns_by_rows[$row] >= 2) {
	    my $location = chr(97 + $row) . chr(48 + $next_white_pawns[$row]) . "+";
	    if ($total_pieces > $max_free_pieces) {
		print OUT "   <piece color=\"white\" type=\"pawn\" location=\"$location\"/>\n";
	    } else {
		print OUT "   <piece color=\"white\" type=\"pawn\"/>\n";
	    }
	}
	if ($$white_pawns_by_rows[$row] and not $$black_pawns_by_rows[$row]) {
	    $queenable_white_pawns ++;
	}
	if ($$black_pawns_by_rows[$row] and not $$white_pawns_by_rows[$row]) {
	    $queenable_black_pawns ++;
	}
    }

    for (my $row = 0; $row < 8; $row ++) {
	if ($$black_pawns_by_rows[$row] >= 1) {
	    my $location = chr(97 + $row) . chr(48 + $earliest_black_pawns[$row]) . "+";
	    if ($total_pieces > $max_free_pieces) {
		print OUT "   <piece color=\"black\" type=\"pawn\" location=\"$location\"/>\n";
	    } else {
		print OUT "   <piece color=\"black\" type=\"pawn\"/>\n";
	    }
	}
	if ($$black_pawns_by_rows[$row] >= 2) {
	    my $location = chr(97 + $row) . chr(48 + $next_black_pawns[$row]) . "+";
	    if ($total_pieces > $max_free_pieces) {
		print OUT "   <piece color=\"black\" type=\"pawn\" location=\"$location\"/>\n";
	    } else {
		print OUT "   <piece color=\"black\" type=\"pawn\"/>\n";
	    }
	}
    }

    if (not $white_queen) {
	for (my $row = 0; $row < 8; $row ++) {
	    if ($$white_pawns_by_rows[$row] and not $$black_pawns_by_rows[$row]) {
		$$white_pawns_by_rows[$row] --;
		&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, 1, $black_queen), "promotion", \@futurebases);
		&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, 1, 0), "capture-promotion", \@futurebases) if $black_queen;
		$$white_pawns_by_rows[$row] ++;
	    }
	}
    } else {
	&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, 0, $black_queen), "capture", \@futurebases);
    }
    for (my $row = 0; $row < 8; $row ++) {
	if ($$white_pawns_by_rows[$row]) {
	    $$white_pawns_by_rows[$row] --;
	    &add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen), "capture", \@futurebases);
	    $$white_pawns_by_rows[$row] ++;
	}
    }

    if (not $black_queen) {
	for (my $row = 0; $row < 8; $row ++) {
	    if ($$black_pawns_by_rows[$row] and not $$white_pawns_by_rows[$row]) {
		$$black_pawns_by_rows[$row] --;
		&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, 1), "promotion", \@futurebases);
		&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, 2), "promotion", \@futurebases);
		&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, 0, 1), "capture-promotion", \@futurebases) if $white_queen;
		&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, 0, 2), "capture-promotion", \@futurebases) if $white_queen;
		$$black_pawns_by_rows[$row] ++;
	    }
	}
    } else {
	&add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, 0), "capture", \@futurebases);
    }
    for (my $row = 0; $row < 8; $row ++) {
	if ($$black_pawns_by_rows[$row]) {
	    $$black_pawns_by_rows[$row] --;
	    &add_futurebase(&filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen), "capture", \@futurebases);
	    $$black_pawns_by_rows[$row] ++;
	}
    }

    if ($queenable_white_pawns) {
	if ($white_queen) {
	    print OUT "   <prune color=\"white\" move=\"P=any\" type=\"discard\"/>\n";
	} else {
	    print OUT "   <prune color=\"white\" move=\"P=R\" type=\"discard\"/>\n";
	    print OUT "   <prune color=\"white\" move=\"P=B\" type=\"discard\"/>\n";
	    print OUT "   <prune color=\"white\" move=\"P=N\" type=\"discard\"/>\n";
	}
    }
    if ($queenable_black_pawns) {
	if ($black_queen) {
	    print OUT "   <prune color=\"black\" move=\"P=any\" type=\"concede\"/>\n";
	}
    }
    print OUT "   <prune color=\"white\" move=\"PxQ\" type=\"discard\"/>\n"
	if ($black_queen == 1) and $total_white_pawns;
    print OUT "   <prune color=\"white\" move=\"PxN\" type=\"discard\"/>\n"
	if ($black_queen == 2) and $total_white_pawns;
    print OUT "   <prune color=\"black\" move=\"PxQ\" type=\"concede\"/>\n"
	if $white_queen and $total_black_pawns;

    print OUT "   <prune color=\"black\" move=\"stalemate\" type=\"concede\"/>\n" if $concede_stalemates;
    print OUT "   <generation-controls>\n";
    print OUT "      <output filename=\"", &filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen), "\"/>\n";
    print OUT "   </generation-controls>\n";
    print OUT "</tablebase>\n";

    print OUT &filename($white_pawns_by_rows, $black_pawns_by_rows, $white_queen, $black_queen), ":";
    foreach my $futurebase (@futurebases) {
	$futurebase = &invert_filename($futurebase) if defined &invert_filename($futurebase);
	print OUT " $futurebase";
    }
    print OUT "\n";
}


sub generate_control_file_set {
    my ($white_pawns_by_row, $black_pawns_by_row) = @_;

    #my $total_white_pawns = eval(join('+',@$white_pawns_by_row));
    #my $total_black_pawns = eval(join('+',@$black_pawns_by_row));

    &generate_control_file_rows($white_pawns_by_row, $black_pawns_by_row, 0, 0);
    &generate_control_file_rows($white_pawns_by_row, $black_pawns_by_row, 1, 0);
    &generate_control_file_rows($white_pawns_by_row, $black_pawns_by_row, 0, 1);
    &generate_control_file_rows($white_pawns_by_row, $black_pawns_by_row, 1, 1);
    &generate_control_file_rows($white_pawns_by_row, $black_pawns_by_row, 0, 2);
    &generate_control_file_rows($white_pawns_by_row, $black_pawns_by_row, 1, 2);
}

sub generate_control_files {
    my ($white_pawns_by_row, $black_pawns_by_row, $next_pawn) = @_;

    if ($next_pawn < 8) {
	my $pawncnt_limit = $$white_pawns_by_row[$next_pawn];
	for (my $pawncnt = 0; $pawncnt <= $pawncnt_limit; $pawncnt ++) {
	    $$white_pawns_by_row[$next_pawn] = $pawncnt;
	    &generate_control_files($white_pawns_by_row, $black_pawns_by_row, $next_pawn + 1);
	    if (($pawncnt == 0) and ($pawncnt_limit > 0)) {
		# could the pawn have been captured by an adjacent enemy pawn?
		if (($next_pawn > 0) and ($$black_pawns_by_row[$next_pawn - 1] != 0)) {
		    $$black_pawns_by_row[$next_pawn - 1] --;
		    $$black_pawns_by_row[$next_pawn] ++;
		    &generate_control_files($white_pawns_by_row, $black_pawns_by_row, $next_pawn + 1);
		    $$black_pawns_by_row[$next_pawn] --;
		    $$black_pawns_by_row[$next_pawn - 1] ++;
		}
		if (($next_pawn < 7) and ($$black_pawns_by_row[$next_pawn + 1] != 0)) {
		    $$black_pawns_by_row[$next_pawn + 1] --;
		    $$black_pawns_by_row[$next_pawn] ++;
		    &generate_control_files($white_pawns_by_row, $black_pawns_by_row, $next_pawn + 1);
		    $$black_pawns_by_row[$next_pawn] --;
		    $$black_pawns_by_row[$next_pawn + 1] ++;
		}
	    }
	}
    } elsif ($next_pawn < 16) {
	my $pawncnt_limit = $$black_pawns_by_row[$next_pawn - 8];
	for (my $pawncnt = 0; $pawncnt <= $pawncnt_limit; $pawncnt ++) {
	    $$black_pawns_by_row[$next_pawn - 8] = $pawncnt;
	    &generate_control_files($white_pawns_by_row, $black_pawns_by_row, $next_pawn + 1);
	    if (($pawncnt == 0) and ($pawncnt_limit > 0)) {
		# could the pawn have been captured by an adjacent enemy pawn?
		if (($next_pawn - 8 > 0) and ($$white_pawns_by_row[$next_pawn - 8 - 1] != 0)) {
		    $$white_pawns_by_row[$next_pawn - 8 - 1] --;
		    $$white_pawns_by_row[$next_pawn - 8] ++;
		    &generate_control_files($white_pawns_by_row, $black_pawns_by_row, $next_pawn + 1);
		    $$white_pawns_by_row[$next_pawn - 8] --;
		    $$white_pawns_by_row[$next_pawn - 8 - 1] ++;
		}
		if (($next_pawn - 8 < 7) and ($$white_pawns_by_row[$next_pawn - 8 + 1] != 0)) {
		    $$white_pawns_by_row[$next_pawn - 8 + 1] --;
		    $$white_pawns_by_row[$next_pawn - 8] ++;
		    &generate_control_files($white_pawns_by_row, $black_pawns_by_row, $next_pawn + 1);
		    $$white_pawns_by_row[$next_pawn - 8] --;
		    $$white_pawns_by_row[$next_pawn - 8 + 1] ++;
		}
	    }
	}
    } else {
	&generate_control_file_set($white_pawns_by_row, $black_pawns_by_row);
    }
}

&generate_control_files([1,1,0,1,0,0,1,1],[1,0,0,2,0,0,1,1]);
