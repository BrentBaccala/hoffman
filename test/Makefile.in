#
# Testing framework for Hoffman
#
# HOFFMAN is how we call the program
#
# PAWNGEN is a script to process <pawngen> elements.
#
# GENCTLFILE is a script to generate simple control files.
#
# NALIMOV is an optional directory containing Nalimov tablebases.  If
# they exist, they are used to verify any corresponding Hoffman
# tablebases after they are built.
#
# PROBES-FAST and PROBES-SLOW are files containing a list of Hoffman
# queries against various tablebases, along with the MD5 hashes of the
# expected output.  The tablebases listed are built as needed, along
# with any dependencies.  Thus, the presence of a query against
# kpkp.htb triggers building all 2-vs-2 tablebases.  Tablebases must
# either have control files in the xml/ subdirectory or follow the
# naming convention recognized by genctlfile.pl.
#
# Tests in the xml/ directory with a comment string "NEGATIVE BUILD"
# are expected to fail cleanly and it's an error if they don't.
#
# Test filenames with dashes are special!  Trailing dash-prefixed
# options are stripped off before looking for the base filename in the
# xml/ directory.
#
# GNU Make is required to process this makefile, along with xmllint
# (part of libxml2) to extract dependencies from the control files.

HOFFMAN ?= ../hoffman
PAWNGEN ?= ../pawngen
GENCTLFILE ?= ../genctlfile.pl

NALIMOV ?= ~/Nalimov

PROBES-FAST = ../PROBES-FAST
PROBES-SLOW = ../PROBES-SLOW

NEGATIVE_BUILD_TESTS = $(notdir $(subst xml,htb,$(shell grep -l "NEGATIVE BUILD" ../xml/*.xml)))

default:
	@echo test Makefile called with no target
	@exit 1

check-negative:
	@for test in $(NEGATIVE_BUILD_TESTS); do							\
		( ! make $$test ) || exit 1;								\
	done
	@echo
	@echo Negative build tests all failed as expected

check-fast: $(PROBES-FAST)
	@cat $(PROBES-FAST) | while read md5expected input files; do					\
		if [ "$$md5expected" != "" -a "$$md5expected" != "#" ]; then				\
			if [ "$$files" != "" -a "$$files" != "doesNotExist.htb" ]; then			\
				make $$files || exit 1;							\
			fi;										\
			/bin/echo -e $$input								\
				| TERM=dumb $(HOFFMAN) -p $$files 2>&1 | tee /dev/stderr		\
				| grep -v "Nalimov"							\
				| tail -n +2								\
				| md5sum | ( read md5actual junk;					\
					if [ "$$md5expected" != "$$md5actual" ]; then			\
						echo $$md5expected != $$md5actual; exit 1;		\
					fi								\
				) || exit 1;								\
		fi;											\
	done
	@echo
	@echo All tests completed successfully

check-slow: $(PROBES-SLOW)
	@cat $(PROBES-SLOW) | while read md5expected input files; do					\
		if [ "$$md5expected" != "" -a "$$md5expected" != "#" ]; then				\
			if [ "$$files" != "" -a "$$files" != "doesNotExist.htb" ]; then			\
				make $$files || exit 1;							\
			fi;										\
			/bin/echo -e $$input								\
				| TERM=dumb $(HOFFMAN) -p $$files 2>&1 | tee /dev/stderr		\
				| grep -v "Nalimov"							\
				| tail -n +2								\
				| md5sum | ( read md5actual junk;					\
					if [ "$$md5expected" != "$$md5actual" ]; then			\
						echo $$md5expected != $$md5actual; exit 1;		\
					fi								\
				) || exit 1;								\
		fi;											\
	done
	@echo
	@echo All tests completed successfully

# $(call strip_options, XMLFILE)
#    returns the base name of XMLFILE with any options removed
#
# i.e, $(call strip_options, fine67-3-3.xml) returns fine67

define strip_options
$(strip $(filter-out -%, $(subst -,  -,$(subst .xml,,$(1)))))
endef

# Generate XML files by either copying them from the xml directory or
# using a Perl script.  If a <pawngen> element appears, run pawngen.
#
# XML files generated by this rule are intermediate targets and would
# be removed except for .SECONDARY:

%.xml:
	@BASE=$(call strip_options, $@).xml;								\
	if [ -r ../xml/$$BASE ]; then									\
		echo ln -s ../xml/$$BASE .;								\
		ln -s ../xml/$$BASE .;									\
		if grep -q pawngen $$BASE; then								\
			echo $(MAKE) $$BASE.futurebases;						\
			$(MAKE) $$BASE.futurebases;							\
			echo $(PAWNGEN) $$BASE;								\
			$(PAWNGEN) $$BASE;								\
		fi;											\
	else												\
		echo $(GENCTLFILE) $@;								\
		$(GENCTLFILE) $@;									\
	fi

.SECONDARY:

# $(call futurebases, XMLFILE)
#    returns a list of futurebases that this XMLFILE depends on
#
# Example: $(call futurebases, kpkp.xml) might return
#    "kk.htb kqk.htb krk.htb kbk.htb knk.htb"

define futurebases
   $(shell ../futurebases.pl $(1) )
endef

# This target builds all the futurebases that a given xml file depends
# on.  For example, assuming the standard kqqkq.xml exists, calling
# 'make kqqkq.xml.futurebases' will build kqkq.htb and kqqk.htb.
#
# An earlier version of this makefile called the futurebases macro
# directly from the %.htb and %.xml targets, but because macros are
# expanded before commands run, no futurebases were made if the xml
# file didn't exist yet!  So now we have a 'fake' target for
# futurebases that calls the macro at the right point in the command,
# at the cost of an additional recursive make.

%.futurebases:
	$(if $(strip $(call futurebases, $*)), $(MAKE) $(call futurebases, $*))

# We may need to build other tablebases that the target depends
# on. This next idea doesn't work because make won't use implicit
# rules multiple times in a chain.  So we recursively call make
# instead.
#
# .SECONDEXPANSION:
#
# %.htb: %.xml $$(call futurebases, %.xml)
# 	$(HOFFMAN) -g $<
#
# The bizarre "wildcard" function is designed to strip off any options
# from the end of the filename and then see if a matching filename
# exists in the $(NALIMOV) directory.  If so, we verify against it.

.DELETE_ON_ERROR:

%.htb: %.xml %.xml.futurebases
	@echo Making $@
	$(HOFFMAN) -g -v $<
	$(if $(wildcard $(NALIMOV)/$(strip_options, $*).nbb.emd), $(HOFFMAN) -v -n $(NALIMOV) $@)

# For testing back-propagation from Syzygy tablebases, we download
# them from the Internet.  sesse.net is currently (2018) a good
# source, that also archives 6- and 7- piece tablebases in separate
# directories, but we don't use them in any tests.

%.rtbw:
	wget http://tablebase.sesse.net/syzygy/3-4-5/$@

# Nalimov tablebases only refer to the .nbw.emd file, but we also need
# the .nbb.emd file as well.

%.emd:
	wget http://tablebase.sesse.net/3-4-5/$@
	wget http://tablebase.sesse.net/3-4-5/$(subst .nbw,.nbb,$@)

clean:
	-rm $(wildcard *.xml) $(wildcard *.htb)
